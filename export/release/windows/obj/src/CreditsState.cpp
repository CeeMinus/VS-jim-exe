// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1bf4423a091ce525_20_new,"CreditsState","new",0xfd580e29,"CreditsState.new","CreditsState.hx",20,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_34_create,"CreditsState","create",0x506b2cd3,"CreditsState.create","CreditsState.hx",34,0xdb40a967)
static const ::String _hx_array_data_3b81c5b7_5[] = {
	HX_("JIM FELLAS",63,27,50,0d),
};
static const ::String _hx_array_data_3b81c5b7_6[] = {
	HX_("Discords",67,79,1f,85),HX_("discord",ac,b9,b4,b2),HX_("Click this for a list of our discords.",cc,e2,21,40),HX_("https://jim-devs.carrd.co",16,d8,74,4d),HX_("0xFF4E5D94",a3,43,3a,9a),
};
static const ::String _hx_array_data_3b81c5b7_7[] = {
	HX_("Kyso",ea,35,ef,31),HX_("kyso",ca,09,16,47),HX_("Director and Charter",ee,48,ea,f7),HX_("https://twitter.com/kirb_da",96,dc,f4,bc),HX_("0xFF3F48CC",df,32,93,c6),
};
static const ::String _hx_array_data_3b81c5b7_8[] = {
	HX_("Mute Senpaii",66,9d,6c,ab),HX_("mutesenpaii",f4,83,9c,97),HX_("Artist",e7,66,dd,ed),HX_("https://twitter.com/MuteSenpaii",bc,46,76,41),HX_("0xFFDA20EF",24,f1,4a,b0),
};
static const ::String _hx_array_data_3b81c5b7_9[] = {
	HX_("mrelevantos",2e,30,64,93),HX_("mrelevantos",2e,30,64,93),HX_("Artist",e7,66,dd,ed),HX_("https://jim-devs.carrd.co",16,d8,74,4d),HX_("0xFFEE4FF1",25,bf,a3,65),
};
static const ::String _hx_array_data_3b81c5b7_10[] = {
	HX_("Mullet Baby",bf,c7,29,26),HX_("mulletbaby",2d,db,f7,61),HX_("Artist",e7,66,dd,ed),HX_("https://twitter.com/youjustgotmail",50,e9,37,cc),HX_("0xFF694010",a6,9b,69,7d),
};
static const ::String _hx_array_data_3b81c5b7_11[] = {
	HX_("WorldendWonder",04,f8,5e,30),HX_("worldendwonder",c4,ef,74,51),HX_("Artist",e7,66,dd,ed),HX_("https://twitter.com/KschIatt",5d,b0,54,79),HX_("0xFFB991C6",2a,d3,00,4d),
};
static const ::String _hx_array_data_3b81c5b7_12[] = {
	HX_("m0no_nightmares",2f,47,72,ae),HX_("m0no",24,0e,31,48),HX_("Artist",e7,66,dd,ed),HX_("https://jim-devs.carrd.co",16,d8,74,4d),HX_("0xFFA023D5",49,45,6b,b3),
};
static const ::String _hx_array_data_3b81c5b7_13[] = {
	HX_("The Questionable One",b5,32,0d,34),HX_("theqone",86,a3,55,df),HX_("Charter",ab,90,cc,9c),HX_("https://jim-devs.carrd.co",16,d8,74,4d),HX_("0xFF3F48CC",df,32,93,c6),
};
static const ::String _hx_array_data_3b81c5b7_14[] = {
	HX_("BlurpleBeeHappy",20,01,80,aa),HX_("bbeehappy",00,93,dc,91),HX_("Artist and Charter",a9,57,ab,3d),HX_("https://jim-devs.carrd.co",16,d8,74,4d),HX_("0xFFD7DEF5",6b,eb,3e,fa),
};
static const ::String _hx_array_data_3b81c5b7_15[] = {
	HX_("Nari",ca,a2,d8,33),HX_("nari",aa,76,ff,48),HX_("Composer",40,f3,7f,5b),HX_("https://jim-devs.carrd.co",16,d8,74,4d),HX_("0xFF34E2A5",0a,d3,94,74),
};
static const ::String _hx_array_data_3b81c5b7_16[] = {
	HX_("Chase_333",22,11,c4,94),HX_("chase333",a5,82,d6,45),HX_("Coder (Ratio)",6b,ce,ec,7c),HX_("https://twitter.com/ChaseW_333",15,e2,64,a2),HX_("0xFFA1A1A1",f8,85,ba,50),
};
static const ::String _hx_array_data_3b81c5b7_17[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_3b81c5b7_18[] = {
	HX_("Psych Engine Team",36,ef,98,3e),
};
static const ::String _hx_array_data_3b81c5b7_19[] = {
	HX_("Shadow Mario",c4,01,05,71),HX_("shadowmario",24,76,c0,e6),HX_("Main Programmer of Psych Engine",6d,91,ad,35),HX_("https://twitter.com/Shadow_Mario_",a2,98,47,eb),HX_("0xFFFFDD33",e8,84,f7,69),
};
static const ::String _hx_array_data_3b81c5b7_20[] = {
	HX_("RiverOaken",36,1d,dd,33),HX_("riveroaken",36,a9,fe,a9),HX_("Main Artist/Animator of Psych Engine",f8,d1,00,db),HX_("https://twitter.com/river_oaken",17,26,7a,b0),HX_("0xFFC30085",15,fd,00,39),
};
static const ::String _hx_array_data_3b81c5b7_21[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_3b81c5b7_22[] = {
	HX_("Engine Contributors",56,17,70,dc),
};
static const ::String _hx_array_data_3b81c5b7_23[] = {
	HX_("shubs",11,04,2c,7c),HX_("shubs",11,04,2c,7c),HX_("New Input System Programmer",11,7a,dd,e2),HX_("https://twitter.com/yoshubs",83,11,b4,00),HX_("0xFF4494E6",f4,27,03,d3),
};
static const ::String _hx_array_data_3b81c5b7_24[] = {
	HX_("PolybiusProxy",5d,cc,61,1d),HX_("polybiusproxy",9d,0c,44,42),HX_(".MP4 Video Loader Extension",14,63,28,2d),HX_("https://twitter.com/polybiusproxy",a5,e1,66,7e),HX_("0xFFE01F32",27,dc,3d,4c),
};
static const ::String _hx_array_data_3b81c5b7_25[] = {
	HX_("SqirraRNG",35,93,90,2a),HX_("gedehari",8f,9f,74,d3),HX_("Chart Editor's Sound Waveform base",be,9c,e4,cf),HX_("https://twitter.com/gedehari",87,e7,51,35),HX_("0xFFFF9300",22,43,a5,62),
};
static const ::String _hx_array_data_3b81c5b7_26[] = {
	HX_("Keoiki",f2,5f,eb,6d),HX_("keoiki",d2,eb,56,39),HX_("Note Splash Animations",7a,27,38,e2),HX_("https://twitter.com/Keoiki_",35,73,4e,3b),HX_("0xFFFFFFFF",48,87,4b,6b),
};
static const ::String _hx_array_data_3b81c5b7_27[] = {
	HX_("bubba",ae,82,e5,ba),HX_("bubba",ae,82,e5,ba),HX_("Guest Composer for \"Hot Dilf\"",bd,93,bf,0d),HX_("https://www.youtube.com/channel/UCxQTnLmv0OAS63yzk9pVfaw",70,3f,cc,67),HX_("0xFF61536A",6c,79,e0,e2),
};
static const ::String _hx_array_data_3b81c5b7_28[] = {
	HX_("",00,00,00,00),
};
static const ::String _hx_array_data_3b81c5b7_29[] = {
	HX_("Funkin' Crew",ab,00,2d,30),
};
static const ::String _hx_array_data_3b81c5b7_30[] = {
	HX_("ninjamuffin99",f7,4c,e5,00),HX_("ninjamuffin99",f7,4c,e5,00),HX_("Programmer of Friday Night Funkin'",2c,f9,c3,b2),HX_("https://twitter.com/ninja_muffin99",7a,ac,b6,89),HX_("0xFFF73838",c3,15,af,bb),
};
static const ::String _hx_array_data_3b81c5b7_31[] = {
	HX_("PhantomArcade",9d,2d,b3,ef),HX_("phantomarcade",9d,69,2e,73),HX_("Animator of Friday Night Funkin'",7d,a9,23,e4),HX_("https://twitter.com/PhantomArcade3K",9d,e2,57,4f),HX_("0xFFFFBB1B",79,91,a3,68),
};
static const ::String _hx_array_data_3b81c5b7_32[] = {
	HX_("evilsk8r",66,38,e0,32),HX_("evilsk8r",66,38,e0,32),HX_("Artist of Friday Night Funkin'",dd,f8,e7,48),HX_("https://twitter.com/evilsk8r",5e,80,bd,94),HX_("0xFF53E52C",07,31,e7,ad),
};
static const ::String _hx_array_data_3b81c5b7_33[] = {
	HX_("kawaisprite",0e,de,66,45),HX_("kawaisprite",0e,de,66,45),HX_("Composer of Friday Night Funkin'",36,08,52,24),HX_("https://twitter.com/kawaisprite",16,e1,bc,3d),HX_("0xFF6475F3",91,36,68,9e),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_139_update,"CreditsState","update",0x5b614be0,"CreditsState.update","CreditsState.hx",139,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_172_changeSelection,"CreditsState","changeSelection",0x5dc3e005,"CreditsState.changeSelection","CreditsState.hx",172,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_190_changeSelection,"CreditsState","changeSelection",0x5dc3e005,"CreditsState.changeSelection","CreditsState.hx",190,0xdb40a967)
HX_LOCAL_STACK_FRAME(_hx_pos_1bf4423a091ce525_213_unselectableCheck,"CreditsState","unselectableCheck",0x4473c3a2,"CreditsState.unselectableCheck","CreditsState.hx",213,0xdb40a967)

void CreditsState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_20_new)
HXLINE(  26)		this->creditsStuff = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  25)		this->iconArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  22)		this->curSelected = 1;
HXLINE(  20)		super::__construct(TransIn,TransOut);
            	}

Dynamic CreditsState_obj::__CreateEmpty() { return new CreditsState_obj; }

void *CreditsState_obj::_hx_vtable = 0;

Dynamic CreditsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreditsState_obj > _hx_result = new CreditsState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CreditsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x24631877) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x24631877;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CreditsState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1bf4423a091ce525_34_create)
HXLINE(  37)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  40)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  40)		::String library = null();
HXDLIN(  40)		 ::flixel::graphics::FlxGraphic imageToReturn = ::Paths_obj::addCustomGraphic(HX_("menuDesat",26,91,04,72));
HXDLIN(  40)		 ::Dynamic _hx_tmp1;
HXDLIN(  40)		if (::hx::IsNotNull( imageToReturn )) {
HXLINE(  40)			_hx_tmp1 = imageToReturn;
            		}
            		else {
HXLINE(  40)			_hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
            		}
HXDLIN(  40)		this->bg = _hx_tmp->loadGraphic(_hx_tmp1,null(),null(),null(),null(),null());
HXLINE(  41)		this->add(this->bg);
HXLINE(  43)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  44)		this->add(this->grpOptions);
HXLINE(  47)		::haxe::Log_obj::trace(HX_("finding mod shit",95,b2,67,88),::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),47,HX_("CreditsState",b7,c5,81,3b),HX_("create",fc,66,0f,7c)));
HXLINE(  48)		if (::sys::FileSystem_obj::exists(HX_("mods/",9e,2f,58,0c))) {
HXLINE(  49)			::haxe::Log_obj::trace(HX_("mods folder",7d,3b,33,83),::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),49,HX_("CreditsState",b7,c5,81,3b),HX_("create",fc,66,0f,7c)));
HXLINE(  50)			if (::sys::FileSystem_obj::exists(::Paths_obj::modFolders(HX_("data/credits.txt",77,6f,6e,c6)))) {
HXLINE(  51)				::haxe::Log_obj::trace(HX_("credit file",c3,cb,61,28),::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),51,HX_("CreditsState",b7,c5,81,3b),HX_("create",fc,66,0f,7c)));
HXLINE(  52)				::Array< ::String > firstarray = ::CoolUtil_obj::coolTextFile(::Paths_obj::modFolders(HX_("data/credits.txt",77,6f,6e,c6)));
HXLINE(  53)				::haxe::Log_obj::trace(HX_("found credit shit",29,de,98,f0),::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),53,HX_("CreditsState",b7,c5,81,3b),HX_("create",fc,66,0f,7c)));
HXLINE(  55)				{
HXLINE(  55)					int _g = 0;
HXDLIN(  55)					while((_g < firstarray->length)){
HXLINE(  55)						::String i = firstarray->__get(_g);
HXDLIN(  55)						_g = (_g + 1);
HXLINE(  56)						::Array< ::String > arr = i.split(HX_("::",c0,32,00,00));
HXLINE(  57)						::haxe::Log_obj::trace(arr,::hx::SourceInfo(HX_("source/CreditsState.hx",f3,8c,3e,78),57,HX_("CreditsState",b7,c5,81,3b),HX_("create",fc,66,0f,7c)));
HXLINE(  58)						this->creditsStuff->push(arr);
            					}
            				}
            			}
            		}
HXLINE(  64)		::Array< ::Dynamic> pisspoop = ::Array_obj< ::Dynamic>::__new(29)->init(0,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_5,1))->init(1,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_6,5))->init(2,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_7,5))->init(3,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_8,5))->init(4,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_9,5))->init(5,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_10,5))->init(6,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_11,5))->init(7,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_12,5))->init(8,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_13,5))->init(9,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_14,5))->init(10,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_15,5))->init(11,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_16,5))->init(12,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_17,1))->init(13,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_18,1))->init(14,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_19,5))->init(15,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_20,5))->init(16,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_21,1))->init(17,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_22,1))->init(18,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_23,5))->init(19,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_24,5))->init(20,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_25,5))->init(21,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_26,5))->init(22,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_27,5))->init(23,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_28,1))->init(24,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_29,1))->init(25,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_30,5))->init(26,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_31,5))->init(27,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_32,5))->init(28,::Array_obj< ::String >::fromData( _hx_array_data_3b81c5b7_33,5));
HXLINE(  97)		{
HXLINE(  97)			int _g = 0;
HXDLIN(  97)			while((_g < pisspoop->length)){
HXLINE(  97)				::Array< ::String > i = pisspoop->__get(_g).StaticCast< ::Array< ::String > >();
HXDLIN(  97)				_g = (_g + 1);
HXLINE(  98)				this->creditsStuff->push(i);
            			}
            		}
HXLINE( 101)		{
HXLINE( 101)			int _g1 = 0;
HXDLIN( 101)			int _g2 = this->creditsStuff->get_length();
HXDLIN( 101)			while((_g1 < _g2)){
HXLINE( 101)				_g1 = (_g1 + 1);
HXDLIN( 101)				int i = (_g1 - 1);
HXLINE( 103)				bool isSelectable = !(this->unselectableCheck(i));
HXLINE( 104)				 ::Alphabet optionText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((70 * i)) ),( (::String)(this->creditsStuff->__get(i)->__GetItem(0)) ),!(isSelectable),false,null(),null());
HXLINE( 105)				optionText->isMenuItem = true;
HXLINE( 106)				optionText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 107)				if (isSelectable) {
HXLINE( 108)					 ::Alphabet _g = optionText;
HXDLIN( 108)					_g->set_x((_g->x - ( (Float)(70) )));
            				}
HXLINE( 110)				optionText->forceX = optionText->x;
HXLINE( 112)				optionText->targetY = ( (Float)(i) );
HXLINE( 113)				this->grpOptions->add(optionText).StaticCast<  ::Alphabet >();
HXLINE( 115)				if (isSelectable) {
HXLINE( 116)					 ::AttachedSprite icon =  ::AttachedSprite_obj::__alloc( HX_CTX ,(HX_("credits/",d5,48,ee,de) + this->creditsStuff->__get(i)->__GetItem(1)),null(),null(),null());
HXLINE( 117)					icon->xAdd = (optionText->get_width() + 10);
HXLINE( 118)					icon->sprTracker = optionText;
HXLINE( 121)					this->iconArray->push(icon);
HXLINE( 122)					this->add(icon);
            				}
            			}
            		}
HXLINE( 126)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE( 127)		this->descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 128)		this->descText->scrollFactor->set(null(),null());
HXLINE( 129)		this->descText->set_borderSize(((Float)2.4));
HXLINE( 130)		this->add(this->descText);
HXLINE( 132)		 ::flixel::FlxSprite _hx_tmp2 = this->bg;
HXDLIN( 132)		_hx_tmp2->set_color(( (int)(::Std_obj::parseInt(( (::String)(this->creditsStuff->__get(this->curSelected)->__GetItem(4)) ))) ));
HXLINE( 133)		this->intendedColor = this->bg->color;
HXLINE( 134)		this->changeSelection(null());
HXLINE( 135)		this->super::create();
            	}


void CreditsState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_1bf4423a091ce525_139_update)
HXLINE( 140)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.7))) {
HXLINE( 142)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 142)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 145)		bool upP = ::PlayerSettings_obj::player1->controls->_ui_upP->check();
HXLINE( 146)		bool downP = ::PlayerSettings_obj::player1->controls->_ui_downP->check();
HXLINE( 148)		if (upP) {
HXLINE( 150)			this->changeSelection(-1);
            		}
HXLINE( 152)		if (downP) {
HXLINE( 154)			this->changeSelection(1);
            		}
HXLINE( 157)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 159)			if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 160)				this->colorTween->cancel();
            			}
HXLINE( 162)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 162)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 163)			::MusicBeatState_obj::switchState( ::MainMenuState_obj::__alloc( HX_CTX ,null(),null()));
            		}
HXLINE( 165)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 166)			::CoolUtil_obj::browserLoad(( (::String)(this->creditsStuff->__get(this->curSelected)->__GetItem(3)) ));
            		}
HXLINE( 168)		this->super::update(elapsed);
            	}


void CreditsState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_172_changeSelection)
HXLINE( 171)		 ::CreditsState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 173)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 173)		_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 174)		while(true){
HXLINE( 175)			 ::CreditsState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 175)			_hx_tmp->curSelected = (_hx_tmp->curSelected + change);
HXLINE( 176)			if ((this->curSelected < 0)) {
HXLINE( 177)				this->curSelected = (this->creditsStuff->get_length() - 1);
            			}
HXLINE( 178)			if ((this->curSelected >= this->creditsStuff->get_length())) {
HXLINE( 179)				this->curSelected = 0;
            			}
HXLINE( 174)			if (!(this->unselectableCheck(this->curSelected))) {
HXLINE( 174)				goto _hx_goto_35;
            			}
            		}
            		_hx_goto_35:;
HXLINE( 182)		int newColor = ( (int)(::Std_obj::parseInt(( (::String)(this->creditsStuff->__get(this->curSelected)->__GetItem(4)) ))) );
HXLINE( 183)		if ((newColor != this->intendedColor)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::CreditsState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween twn){
            				HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_190_changeSelection)
HXLINE( 190)				_gthis->colorTween = null();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 184)			if (::hx::IsNotNull( this->colorTween )) {
HXLINE( 185)				this->colorTween->cancel();
            			}
HXLINE( 187)			this->intendedColor = newColor;
HXLINE( 188)			this->colorTween = ::flixel::tweens::FlxTween_obj::color(this->bg,1,this->bg->color,this->intendedColor, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            		}
HXLINE( 195)		int bullShit = 0;
HXLINE( 197)		{
HXLINE( 197)			int _g = 0;
HXDLIN( 197)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 197)			while((_g < _g1->length)){
HXLINE( 197)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 197)				_g = (_g + 1);
HXLINE( 199)				item->targetY = ( (Float)((bullShit - this->curSelected)) );
HXLINE( 200)				bullShit = (bullShit + 1);
HXLINE( 202)				if (!(this->unselectableCheck((bullShit - 1)))) {
HXLINE( 203)					item->set_alpha(((Float)0.6));
HXLINE( 204)					if ((item->targetY == 0)) {
HXLINE( 205)						item->set_alpha(( (Float)(1) ));
            					}
            				}
            			}
            		}
HXLINE( 209)		this->descText->set_text(( (::String)(this->creditsStuff->__get(this->curSelected)->__GetItem(2)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CreditsState_obj,changeSelection,(void))

bool CreditsState_obj::unselectableCheck(int num){
            	HX_STACKFRAME(&_hx_pos_1bf4423a091ce525_213_unselectableCheck)
HXDLIN( 213)		return ::hx::IsLessEq( this->creditsStuff->__get(num)->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic),1 );
            	}


HX_DEFINE_DYNAMIC_FUNC1(CreditsState_obj,unselectableCheck,return )


::hx::ObjectPtr< CreditsState_obj > CreditsState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CreditsState_obj > __this = new CreditsState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CreditsState_obj > CreditsState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CreditsState_obj *__this = (CreditsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreditsState_obj), true, "CreditsState"));
	*(void **)__this = CreditsState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CreditsState_obj::CreditsState_obj()
{
}

void CreditsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreditsState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(iconArray,"iconArray");
	HX_MARK_MEMBER_NAME(creditsStuff,"creditsStuff");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(intendedColor,"intendedColor");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreditsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(iconArray,"iconArray");
	HX_VISIT_MEMBER_NAME(creditsStuff,"creditsStuff");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(intendedColor,"intendedColor");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreditsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { return ::hx::Val( iconArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creditsStuff") ) { return ::hx::Val( creditsStuff ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedColor") ) { return ::hx::Val( intendedColor ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"unselectableCheck") ) { return ::hx::Val( unselectableCheck_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CreditsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"iconArray") ) { iconArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"creditsStuff") ) { creditsStuff=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"intendedColor") ) { intendedColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CreditsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("iconArray",60,3f,53,5f));
	outFields->push(HX_("creditsStuff",7a,9a,7e,73));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("intendedColor",b8,fb,ff,5a));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreditsState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(CreditsState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CreditsState_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(CreditsState_obj,iconArray),HX_("iconArray",60,3f,53,5f)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(CreditsState_obj,creditsStuff),HX_("creditsStuff",7a,9a,7e,73)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CreditsState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditsState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsInt,(int)offsetof(CreditsState_obj,intendedColor),HX_("intendedColor",b8,fb,ff,5a)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CreditsState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CreditsState_obj_sStaticStorageInfo = 0;
#endif

static ::String CreditsState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("grpOptions",f9,45,d8,00),
	HX_("iconArray",60,3f,53,5f),
	HX_("creditsStuff",7a,9a,7e,73),
	HX_("bg",c5,55,00,00),
	HX_("descText",9e,53,35,f3),
	HX_("intendedColor",b8,fb,ff,5a),
	HX_("colorTween",08,c2,dc,3d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	HX_("unselectableCheck",19,58,ce,19),
	::String(null()) };

::hx::Class CreditsState_obj::__mClass;

void CreditsState_obj::__register()
{
	CreditsState_obj _hx_dummy;
	CreditsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CreditsState",b7,c5,81,3b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreditsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreditsState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreditsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreditsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

